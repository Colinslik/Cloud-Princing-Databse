[logger]
; Section for logging
pdahome = C:\\Program Files\\PredictiveDataAdapter
log.level = INFO
log.file = %(pdahome)s\\var\\log\\pda.log
log.backupcount = 4
log.maxbytes = 104857600
log.formatter = %%(asctime)s %%(processName)s[%%(process)d]: %%(levelname)s - %%(message)s


[main]
; Section for Predictive Data Adapter Service

; Main parameters:
;   main.enabled: enable/disable main service
;   main.interval: interval to start next round of main service
;   main.interval.reload: interval to reload configuration
; 	hosts.registered: registered servers for backup, default all

main.enabled = True
main.interval = 3600
main.interval.reload = 60
main.action.timeout = 300
hosts.registered = *

; SMTP parameters:
;   smtp.host: IP address or name of SMTP server
;   smtp.port: connection port, default 25, 465 for SSL, 587 for STARTTLS
;   smtp.security: connection security, None, SSL or STARTTLS
;   smtp.username: user name for SMTP authentication
;   smtp.password: password for SMTP authentication


;
; Sections for service
;

[service.diskprophet]
; Section for ProphetStor DiskProphet

; DiskProphet parameters:
;   dp.host: hostname or ip addr of DiskProphet server
;   dp.api.type: type of DiskProphet API (on-premise|cloud)
;   dp.api.endpoint: endpoint of DiskProphet API
;   dp.api.user: user of DiskProphet API
;   dp.api.passwd: password of DiskProphet API

dp.host =
dp.api.type =
dp.api.endpoint =
dp.api.user =
dp.api.passwd =

[service.drprophet]
host =
auth = api
username =
password =
key =

[service.sms.twilio]
; Section for Twilio SMS service

; parameters:
;   endpoint: endpoint of the service
;             (e.g. https://api.twilio.com/2010-04-01/Accounts/AC877508d2d7e968f1de6a695dad174740/Messages.json)
;   account: account SID to access the endpoint
;   password: auth token
;   caller: caller number to send the message
endpoint =
account =
token =
caller =


;
; Sections for event
;

; Section name convention:
;   [event.dp.predict.diskfailure.*]: Events of DiskProphet disk failure prediction type
;
; General parameters:
;   display: display name of the event
;   conditional: conditional clause of the event
;   severity: severity level of the event, "Critical", "High", "Medium", or "Low"
; DiskProphet Prediction parameters:
;
;   supported variables for conditional option:
;       near_failure: predicted disk status, possbile values: "Good", "Warning", "Bad"
;

[event.dp.predict.diskfailure.normal]
display = Disk failure prediction - Normal
conditional = {near_failure} == "Good" and ( {host} == "-ALL-" )
severity = Medium

[event.dp.predict.diskfailure.warning]
display = Disk failure prediction - Warning
conditional = {near_failure} == "Warning" and ( {host} == "-ALL-" )
severity = High

[event.dp.predict.diskfailure.critical]
display = Disk failure prediction - Critical
conditional = {near_failure} == "Bad" and ( {host} == "-ALL-" )
severity = Critical


;
; Sections for action
;

; Section name convention:
;   [action.email.*]: Actions of email type
;   [action.sms.twilio.*] Actions of Twilio SMS type
;   [action.drprophet.snapshot.*]: Action type of creating DRProphet snapshot
;   [action.drprophet.schedule.update.*]: Action type of updating DRProphet protection schedule
;   [action.drprophet.schedule.restore.*]: Action type of restoring DRProphet protection schedule
;   [action.log.*]: Actions of log type
;   [action.noop]: No operation
;

[action.email.alert]
to = support@prophetstor.com
from =
cc =
bcc =
subject = [Alert] {display}
body =
  Policy {policy_status}:
  {policy_name}
  
  Impacted host:
  {host}
  
  Current disk status of the host:
  {disks}

[action.sms.twilio.alert]
to = 
body =
  [Alert] {display}
  
  Policy {policy_status}:
  {policy_name}
  Impacted host:
  {host}
  Current disk status of the host:
  {disks}

[action.drprophet.snapshot.critical]
command = {fullbackup}
timeout = 300

[action.drprophet.schedule.update.good]
command = {backupjob}
schedule = * * */1 * *
timeout = 300

[action.drprophet.schedule.update.warning]
command = {backupjob}
schedule = * */8 * * *
timeout = 300

[action.drprophet.schedule.update.critical]
command = {backupjob}
schedule = * */2 * * *
timeout = 300

[action.drprophet.schedule.restore.good]
command = {removejob}
timeout = 300

[action.log.alert]
message = Host {host} has status changed. Disks status: {disks}

;[action.cmd.raw.dir]
; command = dir / w

;[action.ps.raw.process]
; command = Get-Location

[action.noop]
command =

;
; Sections for policy
;

; Parameters:
;   enabled: enable/disable policy, default True
;   type: policy type, every-time or start-end

; every-time type parameters:
;   event: condition to trigger action
;   actions: actions to take when event reported
;   suppression: minimum interval to trigger action again, in seconds

; start-end type parameters:
;   event: condition to trigger actions.start/actions.end
;   actions.start: actions to take when event reported first time
;   actions.end: actions to take when event is no longer reported

[policy.diskfailure.critical.alert]
type = start-end
enabled = False
event = event.dp.predict.diskfailure.critical
actions.start = action.email.alert
actions.end = action.noop

[policy.diskfailure.warning.alert]
type = start-end
enabled = False
event = event.dp.predict.diskfailure.warning
actions.start = action.email.alert
actions.end = action.noop

[policy.diskfailure.normal.alert]
type = start-end
enabled = False
event = event.dp.predict.diskfailure.normal
actions.start = action.email.alert
actions.end = action.noop

[policy.drprophet.schedule.diskfailure.good]
type = start-end
enabled = False
event = event.dp.predict.diskfailure.normal
actions.start = action.drprophet.schedule.update.good
actions.end = action.noop

[policy.drprophet.schedule.diskfailure.warning]
type = start-end
enabled = False
event = event.dp.predict.diskfailure.warning
actions.start = action.drprophet.schedule.update.warning
actions.end = action.noop

[policy.drprophet.schedule.diskfailure.critical]
type = start-end
enabled = False
event = event.dp.predict.diskfailure.critical
actions.start = action.drprophet.schedule.update.critical
actions.end = action.noop

[policy.log.diskfailure.critical]
type = start-end
enabled = True
event = event.dp.predict.diskfailure.critical
actions.start = action.log.alert
actions.end = action.log.alert

[policy.log.diskfailure.warning]
type = start-end
enabled = True
event = event.dp.predict.diskfailure.warning
actions.start = action.log.alert
actions.end = action.log.alert

